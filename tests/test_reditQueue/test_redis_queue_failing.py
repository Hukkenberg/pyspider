# Automatically generated by Pynguin.
import pytest
import redis_queue as module_0


def test_case_0():
    try:
        bool_0 = True
        set_0 = {bool_0, bool_0, bool_0, bool_0}
        redis_queue_0 = module_0.RedisQueue(bool_0, set_0, set_0)
        assert redis_queue_0.name is True
        assert redis_queue_0.maxsize == 0
        assert redis_queue_0.lazy_limit is True
        assert redis_queue_0.last_qsize == 0
        assert module_0.RedisQueue.max_timeout == pytest.approx(0.3, abs=
            0.01, rel=0.01)
        var_0 = redis_queue_0.full()
        assert var_0 is False
        int_0 = -207
        redis_queue_1 = module_0.RedisQueue(int_0, bool_0, redis_queue_0,
            int_0, int_0)
        assert redis_queue_1.name == -207
        assert redis_queue_1.maxsize == -207
        assert redis_queue_1.lazy_limit is True
        assert redis_queue_1.last_qsize == 0
        var_1 = redis_queue_1.put(set_0)
    except BaseException:
        pass


def test_case_1():
    try:
        bytes_0 = b'\xaa'
        redis_queue_0 = module_0.RedisQueue(bytes_0)
        assert redis_queue_0.name == b'\xaa'
        assert redis_queue_0.maxsize == 0
        assert redis_queue_0.lazy_limit is True
        assert redis_queue_0.last_qsize == 0
        assert module_0.RedisQueue.max_timeout == pytest.approx(0.3, abs=
            0.01, rel=0.01)
        var_0 = redis_queue_0.put(redis_queue_0)
    except BaseException:
        pass


def test_case_2():
    try:
        bytes_0 = b''
        redis_queue_0 = module_0.RedisQueue(bytes_0)
        assert redis_queue_0.name == b''
        assert redis_queue_0.maxsize == 0
        assert redis_queue_0.lazy_limit is True
        assert redis_queue_0.last_qsize == 0
        assert module_0.RedisQueue.max_timeout == pytest.approx(0.3, abs=
            0.01, rel=0.01)
        var_0 = redis_queue_0.put(redis_queue_0, bytes_0)
    except BaseException:
        pass


def test_case_3():
    try:
        str_0 = "'V"
        redis_queue_0 = module_0.RedisQueue(str_0, str_0, str_0)
        assert redis_queue_0.name == "'V"
        assert redis_queue_0.maxsize == 0
        assert redis_queue_0.lazy_limit is True
        assert redis_queue_0.last_qsize == 0
        assert module_0.RedisQueue.max_timeout == pytest.approx(0.3, abs=
            0.01, rel=0.01)
        var_0 = redis_queue_0.get()
    except BaseException:
        pass


def test_case_4():
    try:
        bytes_0 = b'\xdf^\xf2\xe6L\xc6\xa4\xbdUA\xfbW}{\x0f\x81/'
        bool_0 = True
        tuple_0 = ()
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bool_0: bool_0}
        str_0 = 'rA \n@[zWFWq'
        str_1 = 'r*.IV@p}\x0b\x0b\tA\x0cU9y5{#'
        str_2 = 'T/\n('
        tuple_1 = str_1, str_2
        redis_queue_0 = module_0.RedisQueue(dict_0, str_0, tuple_1)
        assert redis_queue_0.name == {
            b'\xdf^\xf2\xe6L\xc6\xa4\xbdUA\xfbW}{\x0f\x81/':
            b'\xdf^\xf2\xe6L\xc6\xa4\xbdUA\xfbW}{\x0f\x81/', (True): True}
        assert redis_queue_0.maxsize == 0
        assert redis_queue_0.lazy_limit is True
        assert redis_queue_0.last_qsize == 0
        assert module_0.RedisQueue.max_timeout == pytest.approx(0.3, abs=
            0.01, rel=0.01)
        var_0 = redis_queue_0.get(tuple_0)
    except BaseException:
        pass


def test_case_5():
    try:
        str_0 = '\tgcl()9#'
        str_1 = 'yU;\x0b)b'
        redis_queue_0 = module_0.RedisQueue(str_0, str_1, str_0)
        assert redis_queue_0.name == '\tgcl()9#'
        assert redis_queue_0.maxsize == 0
        assert redis_queue_0.lazy_limit is True
        assert redis_queue_0.last_qsize == 0
        assert module_0.RedisQueue.max_timeout == pytest.approx(0.3, abs=
            0.01, rel=0.01)
        var_0 = redis_queue_0.empty()
    except BaseException:
        pass


def test_case_6():
    try:
        int_0 = -335
        float_0 = -1502.506
        bool_0 = False
        bool_1 = None
        list_0 = [float_0]
        redis_queue_0 = module_0.RedisQueue(bool_0, bool_1, list_0, bool_0)
        assert redis_queue_0.name is False
        assert redis_queue_0.maxsize == 0
        assert redis_queue_0.lazy_limit is True
        assert redis_queue_0.last_qsize == 0
        assert module_0.RedisQueue.max_timeout == pytest.approx(0.3, abs=
            0.01, rel=0.01)
        float_1 = -966.4311
        tuple_0 = redis_queue_0, float_1
        str_0 = 'WQk\n&]Hn8<j#=3'
        set_0 = {int_0, float_0, str_0, float_0}
        str_1 = "\x0c\nM'mr[w+"
        float_2 = 1771.2729
        bool_2 = True
        redis_queue_1 = module_0.RedisQueue(str_0, set_0, str_1, float_2,
            bool_2)
        assert redis_queue_1.name == 'WQk\n&]Hn8<j#=3'
        assert redis_queue_1.maxsize is True
        assert redis_queue_1.lazy_limit is True
        assert redis_queue_1.last_qsize == 0
        var_0 = redis_queue_1.put_nowait(tuple_0)
    except BaseException:
        pass


def test_case_7():
    try:
        bytes_0 = None
        redis_queue_0 = module_0.RedisQueue(bytes_0, bytes_0, bytes_0,
            bytes_0, bytes_0, bytes_0, bytes_0)
        assert redis_queue_0.name is None
        assert redis_queue_0.maxsize is None
        assert redis_queue_0.lazy_limit is None
        assert redis_queue_0.last_qsize == 0
        assert module_0.RedisQueue.max_timeout == pytest.approx(0.3, abs=
            0.01, rel=0.01)
        var_0 = redis_queue_0.put(redis_queue_0)
    except BaseException:
        pass


def test_case_8():
    try:
        bytes_0 = b'\x04\xfa\xcf\x0f\x9afF6\x93\x1b'
        redis_queue_0 = module_0.RedisQueue(bytes_0)
        assert redis_queue_0.name == b'\x04\xfa\xcf\x0f\x9afF6\x93\x1b'
        assert redis_queue_0.maxsize == 0
        assert redis_queue_0.lazy_limit is True
        assert redis_queue_0.last_qsize == 0
        assert module_0.RedisQueue.max_timeout == pytest.approx(0.3, abs=
            0.01, rel=0.01)
        set_0 = {redis_queue_0}
        str_0 = '@'
        bool_0 = True
        bytes_1 = b'S\xb6\xf2m\xdb\xf9\x1ea\x0b:\xc3\x14b\xcaB\x07K'
        complex_0 = None
        dict_0 = {}
        redis_queue_1 = module_0.RedisQueue(redis_queue_0, set_0, str_0,
            bool_0, set_0, bytes_1, complex_0, dict_0)
    except BaseException:
        pass
